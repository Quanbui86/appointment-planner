{"ast":null,"code":"var _jsxFileName = \"D:\\\\QuanRep\\\\job-learn\\\\appointment-planner\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { RouterProvider, createBrowserRouter, createRoutesFromElements, Route, Navigate } from \"react-router-dom\";\nimport Root, { ROUTES } from \"./components/root/Root\";\nimport { AppointmentsPage } from \"./containers/appointmentsPage/AppointmentsPage\";\nimport { ContactsPage } from \"./containers/contactsPage/ContactsPage\";\nimport \"../src/style/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  /*\r\n  Define state variables for \r\n  contacts and appointments \r\n  */\n  const [contacts, setContacts] = useState([{\n    name: '',\n    phone: '',\n    email: ''\n  }]);\n  const [appointments, setAppointments] = useState([{\n    title: 'Important',\n    name: '',\n    date: '',\n    time: '15h30'\n  }]);\n  /*\r\n  Implement functions to add data to\r\n  contacts and appointments\r\n  */\n  function addContact(newContact) {\n    setContacts(prev => [...prev, newContact]);\n  }\n  function addAppointments(newAppointments) {\n    setAppointments(prev => [...prev, newAppointments]);\n  }\n  console.log(contacts);\n  console.log(appointments);\n  const router = createBrowserRouter(createRoutesFromElements( /*#__PURE__*/_jsxDEV(Route, {\n    path: \"/appointment-planner\",\n    element: /*#__PURE__*/_jsxDEV(Root, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 49\n    }, this),\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(Navigate, {\n        to: ROUTES.CONTACTS,\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: ROUTES.CONTACTS,\n      element: /*#__PURE__*/_jsxDEV(ContactsPage, {\n        contacts: contacts,\n        addContact: addContact\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 46\n      }, this) /* Add props to ContactsPage */\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: ROUTES.APPOINTMENTS,\n      element: /*#__PURE__*/_jsxDEV(AppointmentsPage, {\n        contacts: contacts,\n        appointments: appointments,\n        addAppointments: addAppointments\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this) /* Add props to AppointmentsPage */\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this)));\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"y17EBemdfSt5SaBcQWss9d4a1Fo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","RouterProvider","createBrowserRouter","createRoutesFromElements","Route","Navigate","Root","ROUTES","AppointmentsPage","ContactsPage","jsxDEV","_jsxDEV","App","_s","contacts","setContacts","name","phone","email","appointments","setAppointments","title","date","time","addContact","newContact","prev","addAppointments","newAppointments","console","log","router","path","element","fileName","_jsxFileName","lineNumber","columnNumber","children","index","to","CONTACTS","replace","APPOINTMENTS","_c","$RefreshReg$"],"sources":["D:/QuanRep/job-learn/appointment-planner/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { RouterProvider, createBrowserRouter, createRoutesFromElements, Route, Navigate } from \"react-router-dom\"\r\nimport Root, { ROUTES } from \"./components/root/Root\";\r\nimport { AppointmentsPage } from \"./containers/appointmentsPage/AppointmentsPage\";\r\nimport { ContactsPage } from \"./containers/contactsPage/ContactsPage\";\r\nimport \"../src/style/style.css\"\r\nfunction App() {\r\n  /*\r\n  Define state variables for \r\n  contacts and appointments \r\n  */\r\n  const [contacts, setContacts] = useState([{\r\n    name: '',\r\n    phone: '',\r\n    email: ''\r\n  }])\r\n  const [appointments, setAppointments] = useState([{\r\n    title: 'Important',\r\n    name: '',\r\n    date: '',\r\n    time: '15h30'\r\n  }])\r\n  /*\r\n  Implement functions to add data to\r\n  contacts and appointments\r\n  */\r\n  function addContact(newContact) {\r\n    setContacts(prev => [...prev, newContact])\r\n  }\r\n  function addAppointments(newAppointments) {\r\n    setAppointments(prev => [...prev, newAppointments])\r\n  }\r\n  console.log(contacts)\r\n  console.log(appointments)\r\n  const router = createBrowserRouter(createRoutesFromElements(\r\n    <Route path=\"/appointment-planner\" element={<Root />}>\r\n      <Route index element={<Navigate to={ROUTES.CONTACTS} replace />} />\r\n      <Route path={ROUTES.CONTACTS} element={<ContactsPage contacts={contacts} addContact={addContact} /> /* Add props to ContactsPage */} />\r\n      <Route path={ROUTES.APPOINTMENTS} element={\r\n        <AppointmentsPage\r\n          contacts={contacts}\r\n          appointments={appointments}\r\n          addAppointments={addAppointments}\r\n        /> /* Add props to AppointmentsPage */\r\n      } />\r\n    </Route>\r\n  ));\r\n\r\n  return (\r\n    <RouterProvider router={router} />\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}