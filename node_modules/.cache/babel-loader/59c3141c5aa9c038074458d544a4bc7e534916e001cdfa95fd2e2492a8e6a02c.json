{"ast":null,"code":"import _slicedToArray from\"D:/QuanRep/job-learn/appointment-planner/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from\"react\";import{ContactForm}from\"../../components/contactForm/ContactForm\";import{TileList}from\"../../components/tileList/TileList\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var ContactsPage=function ContactsPage(_ref){var contacts=_ref.contacts,addContact=_ref.addContact;/*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */var _useState=useState({name:'',phone:'',email:''}),_useState2=_slicedToArray(_useState,2),contactForm=_useState2[0],setContactForm=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isDuplicate=_useState4[0],setIsDuplicate=_useState4[1];var handleSubmit=function handleSubmit(e){e.preventDefault();/*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */if(!isDuplicate){addContact(contactForm);setContactForm({name:'',phone:'',email:''});}else{alert('bad username');}};/*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */useEffect(function(){setIsDuplicate(contacts.some(function(contact){return contact.name===contactForm.name;}));},[contactForm,contacts]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"section\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Add Contact\"}),/*#__PURE__*/_jsx(ContactForm,{contactForm:contactForm,name:contactForm.name,phone:contactForm.phone,email:contactForm.email,setContactForm:setContactForm,handleSubmit:handleSubmit})]}),/*#__PURE__*/_jsx(\"hr\",{}),/*#__PURE__*/_jsxs(\"section\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Contacts\"}),/*#__PURE__*/_jsx(TileList,{data:contacts})]})]});};","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsx","_jsx","jsxs","_jsxs","ContactsPage","_ref","contacts","addContact","_useState","name","phone","email","_useState2","_slicedToArray","contactForm","setContactForm","_useState3","_useState4","isDuplicate","setIsDuplicate","handleSubmit","e","preventDefault","alert","some","contact","children","data"],"sources":["D:/QuanRep/job-learn/appointment-planner/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = ({ contacts, addContact }) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n  const [contactForm, setContactForm] = useState({\r\n    name: '',\r\n    phone: '',\r\n    email: ''\r\n  });\r\n  const [isDuplicate, setIsDuplicate] = useState(false);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n    if (!isDuplicate) {\r\n      addContact(contactForm)\r\n      setContactForm({\r\n        name: '',\r\n        phone: '',\r\n        email: ''\r\n      })\r\n    } else {\r\n      alert('bad username')\r\n    }\r\n\r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n  useEffect(() => {\r\n    setIsDuplicate(contacts.some(contact => contact.name === contactForm.name));\r\n  }, [contactForm, contacts]);\r\n\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2>\r\n        <ContactForm\r\n          contactForm={contactForm}\r\n          name={contactForm.name}\r\n          phone={contactForm.phone}\r\n          email={contactForm.email}\r\n          setContactForm={setContactForm}\r\n          handleSubmit={handleSubmit}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList data={contacts} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"8HAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAElD,OAASC,WAAW,KAAQ,0CAA0C,CACtE,OAASC,QAAQ,KAAQ,oCAAoC,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAE9D,MAAO,IAAM,CAAAC,YAAY,CAAG,QAAf,CAAAA,YAAYA,CAAAC,IAAA,CAAiC,IAA3B,CAAAC,QAAQ,CAAAD,IAAA,CAARC,QAAQ,CAAEC,UAAU,CAAAF,IAAA,CAAVE,UAAU,CACjD;AACF;AACA;AACA,IACE,IAAAC,SAAA,CAAsCZ,QAAQ,CAAC,CAC7Ca,IAAI,CAAE,EAAE,CACRC,KAAK,CAAE,EAAE,CACTC,KAAK,CAAE,EACT,CAAC,CAAC,CAAAC,UAAA,CAAAC,cAAA,CAAAL,SAAA,IAJKM,WAAW,CAAAF,UAAA,IAAEG,cAAc,CAAAH,UAAA,IAKlC,IAAAI,UAAA,CAAsCpB,QAAQ,CAAC,KAAK,CAAC,CAAAqB,UAAA,CAAAJ,cAAA,CAAAG,UAAA,IAA9CE,WAAW,CAAAD,UAAA,IAAEE,cAAc,CAAAF,UAAA,IAElC,GAAM,CAAAG,YAAY,CAAG,QAAf,CAAAA,YAAYA,CAAIC,CAAC,CAAK,CAC1BA,CAAC,CAACC,cAAc,EAAE,CAClB;AACJ;AACA;AACA,MACI,GAAI,CAACJ,WAAW,CAAE,CAChBX,UAAU,CAACO,WAAW,CAAC,CACvBC,cAAc,CAAC,CACbN,IAAI,CAAE,EAAE,CACRC,KAAK,CAAE,EAAE,CACTC,KAAK,CAAE,EACT,CAAC,CAAC,CACJ,CAAC,IAAM,CACLY,KAAK,CAAC,cAAc,CAAC,CACvB,CAEF,CAAC,CAED;AACF;AACA;AACA,IACE1B,SAAS,CAAC,UAAM,CACdsB,cAAc,CAACb,QAAQ,CAACkB,IAAI,CAAC,SAAAC,OAAO,QAAI,CAAAA,OAAO,CAAChB,IAAI,GAAKK,WAAW,CAACL,IAAI,GAAC,CAAC,CAC7E,CAAC,CAAE,CAACK,WAAW,CAAER,QAAQ,CAAC,CAAC,CAG3B,mBACEH,KAAA,QAAAuB,QAAA,eACEvB,KAAA,YAAAuB,QAAA,eACEzB,IAAA,OAAAyB,QAAA,CAAI,aAAW,EAAK,cACpBzB,IAAA,CAACH,WAAW,EACVgB,WAAW,CAAEA,WAAY,CACzBL,IAAI,CAAEK,WAAW,CAACL,IAAK,CACvBC,KAAK,CAAEI,WAAW,CAACJ,KAAM,CACzBC,KAAK,CAAEG,WAAW,CAACH,KAAM,CACzBI,cAAc,CAAEA,cAAe,CAC/BK,YAAY,CAAEA,YAAa,EAC3B,GACM,cACVnB,IAAA,SAAM,cACNE,KAAA,YAAAuB,QAAA,eACEzB,IAAA,OAAAyB,QAAA,CAAI,UAAQ,EAAK,cACjBzB,IAAA,CAACF,QAAQ,EAAC4B,IAAI,CAAErB,QAAS,EAAG,GACpB,GACN,CAEV,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}